import {AnimationLoop, ClipSpace, loadTextures, resizeGLContext} from 'luma.gl';

const INFO_HTML = `
<p>
  <b>Animating Quasicrystals</b>
<p>
  Crystal patterns generated by wavefront interference patterns.
  Rendered by a custom fragment shader in a luma.gl <code>ClipSpace</code> model.
  A luma.gl port (of the PhiloGL port) of the work of
  <a href="http://www.jasondavies.com/animated-quasicrystals/">Jason Davies</a>
  <form action="#">
    <label for="wavefronts">Wavefronts </label>
    <input id="wavefronts" type="range" value="7.0" min="1" max="10" step="0.1"/>
  </form>
`;

const FRAGMENT_SHADER = `\
precision highp float;

#define PI 3.1415926535

uniform float uTime;
uniform float uRatio;
uniform sampler2D uSampler;

varying vec2 position;
varying vec2 uv;

void main(void) {
  gl_FragColor = texture2D(uSampler, uv);
}
`;

const animationLoop = new AnimationLoop({
  onInitialize: ({gl}) => {

    return loadTextures(gl, {
      urls: ['earth.jpg'],
      parameters: [{
        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,
        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR_MIPMAP_NEAREST,
        [gl.TEXTURE_WRAP_S]: gl.REPEAT,
        [gl.TEXTURE_WRAP_T]: gl.REPEAT,
        mipmap: true
      }]
    })
    .then(textures => ({
      texture: textures[0],
      clipSpace: new ClipSpace(gl, {fs: FRAGMENT_SHADER})
    }));
  },

  onRender: ({gl, canvas, time, clipSpace, texture}) => {
    resizeGLContext(gl, texture);
    clipSpace.draw({
      uniforms: {
        uTime: (time / 600) % (Math.PI * 2),
        uRatio: animationLoop.getHTMLControlValue('wavefronts', 7),
        uSampler: texture
      }
    });
  },

  onAddHTML() {
    return INFO_HTML;
  }
});

animationLoop.getInfo = () => INFO_HTML;

export default animationLoop;

/* global window */
if (!window.website) {
  animationLoop.start();
}
